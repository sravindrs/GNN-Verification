name,assertion_sv,line_number,expected_result,code,file_funct
check_head_increment,assert property (@(posedge clock) push & ~full |-> head == $past(head) + 1),28,PASS,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin // 
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_dataIn_push,assert property (@(posedge clock) push & ~full |-> mem[head] == dataIn),27,PASS,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin // 
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_empty_flag_reset,assert property (@(posedge clock) push & ~full |-> empty == 0),29,PASS,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn; // 
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_tail_increment,assert property (@(posedge clock) pop & ~empty |-> tail == $past(tail) + 1),33,PASS,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1; // 
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_empty_flag_set,assert property (@(posedge clock) tail == head |-> empty == 1),35,PASS,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1; // 
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_dataOut,assert property (@(posedge clock) dataOut == mem[tail]),39,PASS,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail]; // 
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_full_flag,assert property (@(posedge clock) (tail == head) & ~empty |-> full == 1),40,PASS,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty; // 
endmodule",rbFIFO
check_head_not_exceed,assert property (@(posedge clock) head <= LAST),28,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin // 
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_tail_not_exceed,assert property (@(posedge clock) tail <= LAST),33,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1; // 
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_no_push_on_full,assert property (@(posedge clock) full |-> ~push),27,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin // 
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_no_pop_on_empty,assert property (@(posedge clock) empty |-> ~pop),32,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin // 
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_tail_not_ahead,assert property (@(posedge clock) tail <= head),33,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1; // 
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_head_not_behind,assert property (@(posedge clock) head >= tail),28,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin // 
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_no_push_and_pop,assert property (@(posedge clock) push & pop |-> 0),27,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin // 
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_no_push_on_full_flag,assert property (@(posedge clock) full |-> ~push),40,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty; // 
endmodule",rbFIFO
check_tail_not_equal_head,assert property (@(posedge clock) push & ~full |-> tail != head),28,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin // 
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_head_not_equal_tail,assert property (@(posedge clock) pop & ~empty |-> head != tail),33,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1; // 
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_dataOut_not_zero,assert property (@(posedge clock) dataOut != 0),39,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail]; // 
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_dataIn_not_zero,assert property (@(posedge clock) push & ~full |-> dataIn != 0),27,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin // 
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty;
endmodule",rbFIFO
check_no_pop_on_full,assert property (@(posedge clock) full |-> ~pop),40,FAIL,"module rbFIFO(clock, dataIn, push, pop, dataOut, full, empty);
    parameter MSBD = 3;
    parameter LAST = 15;
    parameter MSBA = 3;
    input clock;
    input [MSBD:0] dataIn;
    input push;
    input pop;
    output [MSBD:0] dataOut;
    output full;
    output empty;

    reg [MSBD:0] mem[0:LAST];
    reg [MSBA:0] head;
    reg [MSBA:0] tail;
    reg empty;
    integer i;

    initial begin
        for (i = 0; i <= LAST; i = i + 1)
            mem[i] = 0;
        head = 0;
        tail = 0;
        empty = 1;
    end

    always @(posedge clock) begin
        if (push & ~full) begin
            mem[head] = dataIn;
            head = head + 1;
            empty = 0;
        end else if (pop & ~empty) begin
            tail = tail + 1;
            if (tail == head)
                empty = 1;
        end
    end

    assign dataOut = mem[tail];
    assign full = (tail == head) & ~empty; // 
endmodule",rbFIFO
