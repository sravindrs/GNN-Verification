name,assertion_sv,line_number,expected_result,code
check_L0_to_L1_transition,assert property (@(posedge clock) pc[self] == L0 |-> pc[self] == L1),19,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause; //
    parameter L0 = 0; //
    parameter L1 = 1; //
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin // 
        self = select;
        case (pc[self])
            L0: if (!pause) pc[self] = L1; //
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_L1_to_L2_transition,assert property (@(posedge clock) pc[self] == L1 |-> pc[self] == L2),20,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1; //
    parameter L2 = 2; //
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end //
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_L2_to_L5_or_L3_transition,assert property (@(posedge clock) pc[self] == L2 |-> pc[self] == L5 || pc[self] == L3),21,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2; //
    parameter L3 = 3; //
    parameter L4 = 4;
    parameter L5 = 5; //
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select;
        case (pc[self]) // 
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3; //
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_L3_to_L2_or_L4_transition,assert property (@(posedge clock) pc[self] == L3 |-> pc[self] == L2 || pc[self] == L4),22,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2; //
    parameter L3 = 3; //
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1; 
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end //
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_L4_to_L2_transition,assert property (@(posedge clock) pc[self] == L4 |-> pc[self] == L2),23,PASS,"module main(clock,select,pause);
    input clock; //
    input select; //
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2; //
    parameter L3 = 3;
    parameter L4 = 4; //
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0;
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end //
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_L5_to_L6_transition,assert property (@(posedge clock) pc[self] == L5 |-> pc[self] == L6),24,PASS,"module main(clock,select,pause);
    input clock; //
    input select; //
    input pause; //
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5; //
    parameter L6 = 6; //
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0;
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6; //
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_L6_to_L0_transition,assert property (@(posedge clock) pc[self] == L6 |-> pc[self] == L0),25,PASS,"module main(clock,select,pause);
    input clock; //
    input select; //
    input pause;
    parameter L0 = 0; //
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6; //
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end //
        endcase
    end
endmodule"
check_c_self_reset_at_L1,assert property (@(posedge clock) pc[self] == L1 |-> c[self] == 0),20,PASS,"module main(clock,select,pause);
    input clock; //
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1; //
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1]; //
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0;
        c[0] = 1; c[1] = 1; //
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self])
            L0: if (!pause) pc[self] = L1; //
            L1: begin c[self] = 0; pc[self] = L2; end //
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_c_self_set_at_L6,assert property (@(posedge clock) pc[self] == L6 |-> c[self] == 1),25,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6; //
    reg c[0:1]; //
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1; //
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end // 
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end //
        endcase
    end
endmodule"
check_turn_switch_at_L6,assert property (@(posedge clock) pc[self] == L6 |-> turn == ~self),25,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6; //
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0;
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6; //
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end //
        endcase
    end
endmodule"
check_c_self_reset_at_L4,assert property (@(posedge clock) pc[self] == L4 && turn == self |-> c[self] == 0),23,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4; //
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1]; //
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0;
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end;
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end //
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end //
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_c_self_set_at_L3,assert property (@(posedge clock) pc[self] == L3 && turn != self |-> c[self] == 1),22,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3; //
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1]; //
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0;
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3; //
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end //
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_self_value,assert property (@(posedge clock) self == select),18,PASS,"module main(clock,select,pause);
    input clock; //
    input select; //
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1];
    initial begin
        pc[0] = L0; pc[1] = L0;
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_initial_pc_values,assert property (@(negedge clock) pc[0] == L0 && pc[1] == L0),14,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0; //
    parameter L1 = 1; //
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self;
    reg [2:0] pc[0:1]; // 
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select;
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_initial_c_values,assert property (@(negedge clock) c[0] == 1 && c[1] == 1),15,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1]; //
    reg turn, self;
    reg [2:0] pc[0:1];
    initial begin 
        pc[0] = L0; pc[1] = L0;
        c[0] = 1; c[1] = 1; //
    end
    always @ (posedge clock) begin
        self = select;
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_pause_state_L0,assert property (@(posedge clock) pause |-> pc[self] != L1),19,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause; //
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin 
        self = select;
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_pause_state_L5,assert property (@(posedge clock) pause |-> pc[self] != L6),24,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause; //
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5; 
    parameter L6 = 6; //
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select;
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3; // 
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6; //
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_unpause_state_L0,assert property (@(posedge clock) !pause |-> pc[self] == L1),19,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause; //
    parameter L0 = 0;
    parameter L1 = 1; //
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self;
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin 
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1; //
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_unpause_state_L5,assert property (@(posedge clock) pc[self] == L5 && pause |-> pc[self] == L6),24,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause; //
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6; //
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3; // 
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6; //
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_turn_not_self_L3,assert property (@(posedge clock) pc[self] == L3 && turn != self |-> pc[self] == L4),22,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3; //
    parameter L4 = 4; //
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;  
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end //
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_turn_self_L3,assert property (@(posedge clock) pc[self] == L3 && turn == self |-> pc[self] == L2),22,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2; //
    parameter L3 = 3; //
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1; 
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end //
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_turn_self_L4,assert property (@(posedge clock) pc[self] == L4 && turn == self |-> pc[self] == L2),23,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2; //
    parameter L3 = 3;
    parameter L4 = 4; //
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end // 
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end //
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_c_not_self_L2,assert property (@(posedge clock) pc[self] == L2 && c[~self] == 1 |-> pc[self] == L5),21,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2; //
    parameter L3 = 3; 
    parameter L4 = 4;
    parameter L5 = 5; //
    parameter L6 = 6;
    reg c[0:1]; //
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) // 
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3; //
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_c_self_L2,assert property (@(posedge clock) pc[self] == L2 && c[~self] == 0 |-> pc[self] == L3),21,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2; //
    parameter L3 = 3; //
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1]; //
    reg turn, self;
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1; //
    end
    always @ (posedge clock) begin
        self = select;
        case (pc[self]) // 
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3; //
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_self_value_on_clock,assert property (@(posedge clock) self == select),18,PASS,"module main(clock,select,pause);
    input clock;
    input select; //
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1];
    initial begin
        pc[0] = L0; pc[1] = L0;
        c[0] = 1; c[1] = 1;
    end 
    always @ (posedge clock) begin
        self = select; //
        case (pc[self])
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_turn_value_on_L6,assert property (@(posedge clock) pc[self] == L6 |-> turn == ~self),25,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6; //
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1];
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end //
        endcase
    end
endmodule"
check_c_self_value_on_L6,assert property (@(posedge clock) pc[self] == L6 |-> c[self] == 1),25,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6; //
    reg c[0:1]; //
    reg turn, self; //
    reg [2:0] pc[0:1];
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1; //
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end // 
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end //
        endcase
    end
endmodule"
check_pc_self_value_on_L6,assert property (@(posedge clock) pc[self] == L6 |-> pc[self] == L0),25,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0; //
    parameter L1 = 1;
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6; //
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1;
    end
    always @ (posedge clock) begin
        self = select; //
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end // 
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end //
        endcase
    end
endmodule"
check_c_self_value_on_L1,assert property (@(posedge clock) pc[self] == L1 |-> c[self] == 0),20,PASS,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1; //
    parameter L2 = 2;
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1]; //
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; //
        c[0] = 1; c[1] = 1; //
    end
    always @ (posedge clock) begin
        self = select; // 
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end //
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
check_pc_self_value_on_L1,assert property (@(posedge clock) pc[self] == L1 |-> pc[self] == L2),20,FAIL,"module main(clock,select,pause);
    input clock;
    input select;
    input pause;
    parameter L0 = 0;
    parameter L1 = 1; //
    parameter L2 = 2; //
    parameter L3 = 3;
    parameter L4 = 4;
    parameter L5 = 5;
    parameter L6 = 6;
    reg c[0:1];
    reg turn, self; //
    reg [2:0] pc[0:1]; //
    initial begin
        pc[0] = L0; pc[1] = L0; // 
        c[0] = 1; c[1] = 1; //
    end
    always @ (posedge clock) begin
        self = select; // 
        case (pc[self]) //
            L0: if (!pause) pc[self] = L1;
            L1: begin c[self] = 0; pc[self] = L2; end //
            L2: if (c[~self] == 1) pc[self] = L5; else pc[self] = L3;
            L3: if (turn == self) pc[self] = L2; else begin c[self] = 1; pc[self] = L4; end
            L4: if (turn == self) begin c[self] = 0; pc[self] = L2; end
            L5: if (!pause) pc[self] = L6;
            L6: begin c[self] = 1; turn = ~self; pc[self] = L0; end
        endcase
    end
endmodule"
