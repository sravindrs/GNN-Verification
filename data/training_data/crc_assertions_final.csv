name,assertion_sv,line_number,expected_result,code
check_crc_in_bound,assert property (@(posedge clk) $isunknown(crc_in) === 0),2,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in; // 
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_data_in_bound,assert property (@(posedge clk) $isunknown(data_in) === 0),3,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in; // 
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_new_crc_bound,assert property (@(posedge clk) $isunknown(new_crc) === 0),4,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; // 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_parallel_crc_function,"assert property (@(posedge clk) $isunknown(parallel_crc(crc_in, data_in)) === 0)",5,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc; // 
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_crc_in_width,assert property (@(posedge clk) $size(crc_in) == 32),2,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in; // 
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_data_in_width,assert property (@(posedge clk) $size(data_in) == 8),3,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in; // 
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_new_crc_width,assert property (@(posedge clk) $size(new_crc) == 32),4,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; // 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_crc_in_not_zero,assert property (@(posedge clk) crc_in !== 0),2,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in; // 
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_data_in_not_zero,assert property (@(posedge clk) data_in !== 0),3,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in; // 
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_new_crc_not_zero,assert property (@(posedge clk) new_crc !== 0),4,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; // 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_crc_in_zero,assert property (@(posedge clk) crc_in === 0),2,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in; // 
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_data_in_zero,assert property (@(posedge clk) data_in === 0),3,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in; // 
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_new_crc_zero,assert property (@(posedge clk) new_crc === 0),4,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; // 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_crc_in_max,assert property (@(posedge clk) crc_in === 32'hFFFF_FFFF),2,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in; // 
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_data_in_max,assert property (@(posedge clk) data_in === 8'hFF),3,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in; // 
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_new_crc_max,assert property (@(posedge clk) new_crc === 32'hFFFF_FFFF),4,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; // 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_crc_in_min,assert property (@(posedge clk) crc_in === 32'h0000_0000),2,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in; // 
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_data_in_min,assert property (@(posedge clk) data_in === 8'h00),3,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in; // 
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_new_crc_min,assert property (@(posedge clk) new_crc === 32'h0000_0000),4,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; // 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_crc_in_not_max,assert property (@(posedge clk) crc_in !== 32'hFFFF_FFFF),2,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in; // 
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_data_in_not_max,assert property (@(posedge clk) data_in !== 8'hFF),3,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in; // 
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_new_crc_not_max,assert property (@(posedge clk) new_crc !== 32'hFFFF_FFFF),4,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; // 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_crc_in_not_min,assert property (@(posedge clk) crc_in !== 32'h0000_0000),2,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in; // 
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_data_in_not_min,assert property (@(posedge clk) data_in !== 8'h00),3,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in; // 
    output [31:0] new_crc; 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_new_crc_not_min,assert property (@(posedge clk) new_crc !== 32'h0000_0000),4,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; // 
    function [31:0] parallel_crc;
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_parallel_crc_max,"assert property (@(posedge clk) parallel_crc(crc_in, data_in) === 32'hFFFF_FFFF)",5,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc; // 
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_parallel_crc_min,"assert property (@(posedge clk) parallel_crc(crc_in, data_in) === 32'h0000_0000)",5,FAIL,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc; // 
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_parallel_crc_not_max,"assert property (@(posedge clk) parallel_crc(crc_in, data_in) !== 32'hFFFF_FFFF)",5,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc; // 
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_parallel_crc_not_min,"assert property (@(posedge clk) parallel_crc(crc_in, data_in) !== 32'h0000_0000)",5,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc; // 
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in);
endmodule"
check_new_crc_equals_parallel_crc,"assert property (@(posedge clk) new_crc === parallel_crc(crc_in, data_in))",53,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc; //
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc //
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in); //
endmodule"
check_reset_behaviour_assertion,assert property (@(posedge clk) reset |-> (crc == 32'hFFFFFFFF)),53,PASS,"
module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   //
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc; 
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc 
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in); //
endmodule"
check_calculation_assertion,"assert property (@(posedge clk) clken && compute |-> new_crc == parallel_crc(crc_in, data_in));
",53,PASS,"
module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc; //
        input [31:0] c;    //
        input [7:0] d;     //
        reg [31:24] x;     //
        begin: _parallel_crc //
            x = c[31:24] ^ d;//
            parallel_crc[31] = x[29] ^ c[23];//
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];//
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];//
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];//
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];//
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];//
            parallel_crc[25] = x[26] ^ x[27] ^ c[17]; //
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];//
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];//
            parallel_crc[22] = x[24] ^ c[14];//
            parallel_crc[21] = x[29] ^ c[13];//
            parallel_crc[20] = x[28] ^ c[12];//
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];//
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];//
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];//
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];//
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];//
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];//
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];//
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];//
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3]; //
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];//
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];//
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];//
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];//
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];//
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];//
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];//
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];//
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];//
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];//
            parallel_crc[0]  = x[30] ^ x[24];//
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in); //
endmodule"
check_clock_assertion,"assert property (@(posedge clk) !clken |-> $stable(new_crc));
",53,PASS,"module parallel_crc_calc(crc_in, data_in, new_crc);
    input [31:0] crc_in;   
    input [7:0] data_in;   
    output [31:0] new_crc; 
    function [31:0] parallel_crc; //
        input [31:0] c;    
        input [7:0] d;     
        reg [31:24] x;     
        begin: _parallel_crc //
            x = c[31:24] ^ d;
            parallel_crc[31] = x[29] ^ c[23];
            parallel_crc[30] = x[28] ^ x[31] ^ c[22];
            parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
            parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
            parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
            parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
            parallel_crc[25] = x[26] ^ x[27] ^ c[17];
            parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
            parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
            parallel_crc[22] = x[24] ^ c[14];
            parallel_crc[21] = x[29] ^ c[13];
            parallel_crc[20] = x[28] ^ c[12];
            parallel_crc[19] = x[27] ^ x[31] ^ c[11];
            parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
            parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
            parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
            parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
            parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
            parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30] ^ c[5];
            parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[4];
            parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
            parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
            parallel_crc[9]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
            parallel_crc[8]  = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
            parallel_crc[7]  = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
            parallel_crc[6]  = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
            parallel_crc[5]  = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] ^ x[24];
            parallel_crc[4]  = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
            parallel_crc[3]  = x[31] ^ x[25] ^ x[26] ^ x[27];
            parallel_crc[2]  = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
            parallel_crc[1]  = x[30] ^ x[24] ^ x[31] ^ x[25];
            parallel_crc[0]  = x[30] ^ x[24];
        end
    endfunction
    assign new_crc = parallel_crc(crc_in, data_in); //
endmodule"
check_crc_initial_value,assert property (@(posedge clk) reset |-> crc == CRC_INITIAL_VALUE),48,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111; //
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31]; // 
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE : //
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_value_load,"assert property (@(posedge clk) load |-> crc == {crc[23:0], data_in})",49,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] // 
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc; //
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE : //
		     load ? {crc[23:0], data_in} : //
		     compute ? parallel_crc(crc,data_in) : //
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_value_compute,"assert property (@(posedge clk) compute |-> crc == parallel_crc(crc,data_in))",50,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24]; 
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_value_default,assert property (@(posedge clk) (!reset && !load && !compute) |-> crc == crc),51,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24]; // 
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_data_out,assert property (@(posedge clk) data_out == ~crc[31:24]),53,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26]; // 
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_ok,assert property (@(posedge clk) crc == CRC_REMAINDER |-> crc_ok),54,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	//
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25]; 
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; //
endmodule "
check_crc_not_ok,assert property (@(posedge clk) crc != CRC_REMAINDER |-> !crc_ok),55,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	 //
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011; //
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24]; 
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER;  //
endmodule "
check_crc_on_reset,assert property (@(posedge clk) reset |-> crc == CRC_INITIAL_VALUE),46,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		//
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111; //
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0]; 
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE; //
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE ://
		     load ? {crc[23:0], data_in} ://
		     compute ? parallel_crc(crc,data_in) ://
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_on_clk,assert property (@(posedge clk) clken |-> crc == new_crc),47,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	//
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		//
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	//
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31]; // 
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)//
	  crc = new_crc;//
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_on_load,"assert property (@(posedge clk) load |-> crc == {crc[23:0], data_in})",49,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	//
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24]; 
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE : //
		     load ? {crc[23:0], data_in} ://
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_on_compute,"assert property (@(posedge clk) compute |-> crc == parallel_crc(crc,data_in))",50,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23]; //
	parallel_crc[30] = x[28] ^ x[31] ^ c[22]; //
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21]; //
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20]; //
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19]; //
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18]; //
	parallel_crc[25] = x[26] ^ x[27] ^ c[17]; //
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16]; //
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15]; //
	parallel_crc[22] = x[24] ^ c[14]; //
	parallel_crc[21] = x[29] ^ c[13]; //
	parallel_crc[20] = x[28] ^ c[12]; //
	parallel_crc[19] = x[27] ^ x[31] ^ c[11]; //
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10]; //
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9]; //
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8]; //
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7]; //
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6]; //
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5]; //
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4]; //
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3]; //
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2]; //
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1]; //
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0]; //
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31]; //
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31]; //
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] // 
			  ^ x[24]; //
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24]; //
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27]; //
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26]; //
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25]; //
	parallel_crc[0] = x[30] ^ x[24]; //
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE : //
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) : //
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_not_changed,assert property (@(posedge clk) (!reset && !load && !compute) |-> crc == crc),51,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24]; 
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE : //
		     load ? {crc[23:0], data_in} : //
		     compute ? parallel_crc(crc,data_in) : //
		     crc; //
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER;  //
endmodule "
check_data_out_value,assert property (@(posedge clk) data_out == ~crc[31:24]),53,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26]; 
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24]; //
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_ok_value,assert property (@(posedge clk) crc_ok == (crc == CRC_REMAINDER)),54,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25]; 
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER;  //
endmodule "
check_crc_not_ok_value,assert property (@(posedge clk) crc_ok == (crc != CRC_REMAINDER)),55,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24]; 
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER;  //
endmodule "
check_crc_reset_value,assert property (@(posedge clk) reset |-> crc == CRC_INITIAL_VALUE),48,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31]; 
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE; //
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE : //
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_load_value,"assert property (@(posedge clk) load |-> crc == {crc[23:0], data_in})",49,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in; //
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc; //
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] 
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE : //
		     load ? {crc[23:0], data_in} : //
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_compute_value,"assert property (@(posedge clk) compute |-> crc == parallel_crc(crc,data_in))",50,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in; //
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc; //
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc; //
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23]; //
	parallel_crc[30] = x[28] ^ x[31] ^ c[22]; //
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21]; //
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20]; //
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19]; //
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18]; //
	parallel_crc[25] = x[26] ^ x[27] ^ c[17]; //
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16]; //
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15]; //
	parallel_crc[22] = x[24] ^ c[14]; //
	parallel_crc[21] = x[29] ^ c[13]; //
	parallel_crc[20] = x[28] ^ c[12]; //
	parallel_crc[19] = x[27] ^ x[31] ^ c[11]; //
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10]; //
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9]; //
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8]; //
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7]; //
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6]; //
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5]; //
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4]; //
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3]; //
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2]; //
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1]; //
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0]; //
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31]; //
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31]; //
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] // 
			  ^ x[24]; //
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24]; //
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27]; //
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26]; //
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25]; //
	parallel_crc[0] = x[30] ^ x[24]; //
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_default_value,assert property (@(posedge clk) (!reset && !load && !compute) |-> crc == crc),51,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24]; 
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE : //
		     load ? {crc[23:0], data_in} : //
		     compute ? parallel_crc(crc,data_in) : //
		     crc; //
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER;  //
endmodule "
check_crc_ok_reminder,assert property (@(posedge clk) crc_ok == (crc == CRC_REMAINDER)),54,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25]; 
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; //
endmodule "
check_crc_not_ok_reminder,assert property (@(posedge clk) !crc_ok == (crc != CRC_REMAINDER)),55,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc;
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24]; 
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; //
endmodule "
check_crc_reset_initial_value,assert property (@(posedge clk) reset |-> crc == CRC_INITIAL_VALUE),48,FAIL,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; //
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc; //
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31]; // 
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25]
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction  
    initial crc = CRC_INITIAL_VALUE; //
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc; //
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE : //
		     load ? {crc[23:0], data_in} :
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER; 
endmodule "
check_crc_load_shift_value,"assert property (@(posedge clk) load |-> crc == {crc[23:0], data_in})",49,PASS,"module main(clk,clken,reset,load,compute,data_in,data_out,crc_ok,crc);
    input         clk;		
    input         clken; 	
    input         reset; 	
    input         load; 	
    input         compute;	
    input [7:0]   data_in;	//
    output [7:0]  data_out;
    output 	  crc_ok;	
    output [31:0] crc;		
    parameter CRC_INITIAL_VALUE = 32'b11111111111111111111111111111111;
    parameter CRC_REMAINDER = 32'b11000111000001001101110101111011;
    reg [31:0]    crc; //
    wire [31:0]   new_crc;	
  function [31:0] parallel_crc;
	input [31:0] c;		
	input [7:0] d;		
    begin: _parallel_crc
	reg [31:24] x;
	x = c[31:24] ^ d;
	parallel_crc[31] = x[29] ^ c[23];
	parallel_crc[30] = x[28] ^ x[31] ^ c[22];
	parallel_crc[29] = x[27] ^ x[30] ^ x[31] ^ c[21];
	parallel_crc[28] = x[26] ^ x[29] ^ x[30] ^ c[20];
	parallel_crc[27] = x[31] ^ x[25] ^ x[28] ^ x[29] ^ c[19];
	parallel_crc[26] = x[30] ^ x[24] ^ x[27] ^ x[28] ^ c[18];
	parallel_crc[25] = x[26] ^ x[27] ^ c[17];
	parallel_crc[24] = x[31] ^ x[25] ^ x[26] ^ c[16];
	parallel_crc[23] = x[30] ^ x[24] ^ x[25] ^ c[15];
	parallel_crc[22] = x[24] ^ c[14];
	parallel_crc[21] = x[29] ^ c[13];
	parallel_crc[20] = x[28] ^ c[12];
	parallel_crc[19] = x[27] ^ x[31] ^ c[11];
	parallel_crc[18] = x[26] ^ x[30] ^ x[31] ^ c[10];
	parallel_crc[17] = x[25] ^ x[29] ^ x[30] ^ c[9];
	parallel_crc[16] = x[24] ^ x[28] ^ x[29] ^ c[8];
	parallel_crc[15] = x[27] ^ x[28] ^ x[29] ^ x[31] ^ c[7];
	parallel_crc[14] = x[26] ^ x[27] ^ x[28] ^ x[30] ^ x[31] ^ c[6];
	parallel_crc[13] = x[31] ^ x[25] ^ x[26] ^ x[27] ^ x[29] ^ x[30]
			   ^ c[5];
	parallel_crc[12] = x[30] ^ x[24] ^ x[25] ^ x[26] ^ x[28] ^ x[29]
			   ^ c[4];
	parallel_crc[11] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[3];
	parallel_crc[10] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ c[2];
	parallel_crc[9] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ c[1];
	parallel_crc[8] = x[24] ^ x[25] ^ x[27] ^ x[28] ^ c[0];
	parallel_crc[7] = x[24] ^ x[26] ^ x[27] ^ x[29] ^ x[31];
	parallel_crc[6] = x[25] ^ x[26] ^ x[28] ^ x[29] ^ x[30] ^ x[31];
	parallel_crc[5] = x[31] ^ x[30] ^ x[29] ^ x[28] ^ x[27] ^ x[25] // 
			  ^ x[24];
	parallel_crc[4] = x[30] ^ x[28] ^ x[27] ^ x[26] ^ x[24];
	parallel_crc[3] = x[31] ^ x[25] ^ x[26] ^ x[27];
	parallel_crc[2] = x[30] ^ x[24] ^ x[31] ^ x[25] ^ x[26];
	parallel_crc[1] = x[30] ^ x[24] ^ x[31] ^ x[25];
	parallel_crc[0] = x[30] ^ x[24];
    end 
    endfunction 
    initial crc = CRC_INITIAL_VALUE;
    always @ (posedge clk) begin
	if (clken)
	  crc = new_crc;
    end
    assign new_crc = reset ? CRC_INITIAL_VALUE :
		     load ? {crc[23:0], data_in} : //
		     compute ? parallel_crc(crc,data_in) :
		     crc;
    assign data_out = ~crc[31:24];
    assign crc_ok = crc == CRC_REMAINDER;  
endmodule "
check_crc_update,assert property (@(posedge clk) clken == 1 |-> crc == new_crc),6,PASS,"module crc_flipflop(clk, clken, new_crc, crc);
    input clk;            
    input clken;          
    input [31:0] new_crc; 
    output reg [31:0] crc; 
    always @(posedge clk) begin // 
        if (clken) //
            crc <= new_crc; //
    end
endmodule"
check_no_crc_update,assert property (@(posedge clk) clken == 0 |-> crc == $past(crc)),6,PASS,"module crc_flipflop(clk, clken, new_crc, crc);
    input clk;            
    input clken;          
    input [31:0] new_crc; 
    output reg [31:0] crc; 
    always @(posedge clk) begin // 
        if (clken) //
            crc <= new_crc; //
    end
endmodule"
check_crc_update_fail,assert property (@(posedge clk) clken == 0 |-> crc != new_crc),6,FAIL,"module crc_flipflop(clk, clken, new_crc, crc);
    input clk;            
    input clken;          
    input [31:0] new_crc; 
    output reg [31:0] crc; 
    always @(posedge clk) begin // 
        if (clken) //
            crc <= new_crc; //
    end
endmodule"
check_no_crc_update_fail,assert property (@(posedge clk) clken == 1 |-> crc != $past(crc)),6,FAIL,"module crc_flipflop(clk, clken, new_crc, crc);
    input clk;            
    input clken;          
    input [31:0] new_crc; 
    output reg [31:0] crc; 
    always @(posedge clk) begin // 
        if (clken) //
            crc <= new_crc; //
    end
endmodule"
check_crc_unchanged_without_clk,assert property (@(negedge clk) crc == $past(crc)),6,PASS,"module crc_flipflop(clk, clken, new_crc, crc);
    input clk;            
    input clken;          
    input [31:0] new_crc; 
    output reg [31:0] crc; 
    always @(posedge clk) begin // 
        if (clken) //
            crc <= new_crc; //
    end
endmodule"
